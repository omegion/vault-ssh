// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/omegion/vault-ssh/internal/client (interfaces: Interface)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// CreateCACertificate mocks base method
func (m *MockInterface) CreateCACertificate(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCACertificate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCACertificate indicates an expected call of CreateCACertificate
func (mr *MockInterfaceMockRecorder) CreateCACertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCACertificate", reflect.TypeOf((*MockInterface)(nil).CreateCACertificate), arg0)
}

// CreateRole mocks base method
func (m *MockInterface) CreateRole(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole
func (mr *MockInterfaceMockRecorder) CreateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockInterface)(nil).CreateRole), arg0, arg1)
}

// EnableSSHEngine mocks base method
func (m *MockInterface) EnableSSHEngine(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableSSHEngine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableSSHEngine indicates an expected call of EnableSSHEngine
func (mr *MockInterfaceMockRecorder) EnableSSHEngine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableSSHEngine", reflect.TypeOf((*MockInterface)(nil).EnableSSHEngine), arg0)
}

// GetCACertificate mocks base method
func (m *MockInterface) GetCACertificate(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCACertificate", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCACertificate indicates an expected call of GetCACertificate
func (mr *MockInterfaceMockRecorder) GetCACertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCACertificate", reflect.TypeOf((*MockInterface)(nil).GetCACertificate), arg0)
}

// Sign mocks base method
func (m *MockInterface) Sign(arg0, arg1 string, arg2 []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign
func (mr *MockInterfaceMockRecorder) Sign(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockInterface)(nil).Sign), arg0, arg1, arg2)
}
